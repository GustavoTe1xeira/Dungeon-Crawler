#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <time.h>
#include <locale.h>


#define MAPA_LINHA 15
#define MAPA_COLUNA 15

// definindo o mapa
char map[MAPA_LINHA][MAPA_COLUNA] = {
    {'#', '#', '#', '#', '#', '#', '#', '#', '#','#','#', '#', '#', '#',  '#'      },
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#','#', '#', '#', '#', '#'       },
    {'#', '.', '#', '#', '#', '#', '#', '#', '.', '#','#', '#', '#', '#', '#'       },
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#','#', '#', '#', '#', '#'       },
    {'#', '.', '.', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#'       },
    {'#', '.', '.', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#'       },
    {'#', '.', '.', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#'       },
    {'#', '.', '.', '#', '#', '#', '.', '.', '.', '#','#', '#', '#', '#', '#'       },
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.','.', '#', '#', '#', '#'       },
    {'#', '#', '#', '#', '#', '#', '#', '#', '.', '.','.', '#', '#', '#', '#'       },
    {'#', '#', '#', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '#'       },
    {'#', '#', '#', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '#'       },
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.','.', '.', '.', '.', '#'       },
    {'#', '#', '#', '#', '#', '#', '#', '.', '.', '.','.', '.', '.', '.', '#'       },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#'       },

};

int player_x = 1;
int player_y = 1;
int has_key = 0;

void GerarMapa1() {
    //struct para gerar o mapa 1 e inserir no void Fase1
    for (int y = 0; y < MAPA_LINHA; y++) {
        for (int x = 0; x < MAPA_COLUNA; x++) {
            if (x == player_x && y == player_y) {
                printf("&");
            } else {
                printf("%c", map[y][x]);
            }
        }
        printf("\n");
    }
}

void PrimeiraFase() {
    // Adiciona a chave e a porta no mapa
    int escolha;
    map[3][8] = '@';
    map[10][14] = 'D';

    char input;

    while (1) {
        system("cls");

        GerarMapa1();
    // Comando para andar durante o jogo
        input = getch();

            switch (input) {
            case 'a':
                if (map[player_y][player_x - 1] != '#') {
                    player_x--;
                }
                    break;
            case 'd':
                if ((map[player_y][player_x + 1] != '#') &&
                    !(map[player_y][player_x] == 'D' && !has_key)) {
                    player_x++;
                }
                    break;
            case 'w':
                if (map[player_y - 1][player_x] != '#') {
                    player_y--;
                }
                    break;
            case 's':
                if (map[player_y + 1][player_x] != '#') {
                    player_y++;
                }
                    break;
            case 'i':
                if (map[player_y][player_x] == '@') {
                    map[player_y][player_x] = ' ';
                    has_key = 1;
                    printf("Você pegou a chave!\n");
                } else if (map[player_y][player_x] == 'D' && has_key) {
                    map[player_y][player_x] = '=';
                    printf("Você abriu a porta!\n");
                }
                else if (map[player_y][player_x] == '=' && has_key){

                    printf("deseja continuar o jogo?"); scanf("%d", &escolha);
                    {
                        if(escolha == 2){
                            system("cls");
                            SegundaFase();

                        }
                    }
                }


                break;
        }
    }

    return 0;
}



void SegundaFase() {
    // Adiciona a chave e a porta no mapa
    int escolha;
    map[3][8] = '@';
    map[10][14] = 'D';

    char input;

    while (1) {
        system("cls");

        GerarMapa2();
    // Comando para andar durante o jogo
        input = getch();

        switch (input) {
            case 'a':
                if (map[player_y][player_x - 1] != '#') {
                    player_x--;
                }
                break;
            case 'd':
                if ((map[player_y][player_x + 1] != '#') &&
                    !(map[player_y][player_x] == 'D' && !has_key)) {
                    player_x++;
                }
                break;
            case 'w':
                if (map[player_y - 1][player_x] != '#') {
                    player_y--;
                }
                break;
            case 's':
                if (map[player_y + 1][player_x] != '#') {
                    player_y++;
                }
                break;
            case 'i':
                if (map[player_y][player_x] == '@') {
                    map[player_y][player_x] = ' ';
                    has_key = 1;
                    printf("Você pegou a chave!\n");
                } else if (map[player_y][player_x] == 'D' && has_key) {
                    map[player_y][player_x] = '=';
                    printf("Você abriu a porta!\n");
                }
                else if (map[player_y][player_x] == '=' && has_key){


                }
            }



                break;
        }
    }



void GerarMapa2() {
    //struct para gerar o mapa 2 e inserir no void SegundaFase
    for (int y = 0; y < MAPA_LINHA; y++) {
        for (int x = 0; x < MAPA_COLUNA; x++) {
            if (x == player_x && y == player_y) {
                printf("&");
            } else {
                printf("%c", map[y][x]);
            }
        }
        printf("\n");
    }
}

void Mapa2(){
#define MAPA_LINHA 30
#define MAPA_COLUNA 30
char map[MAPA_LINHA][MAPA_COLUNA] = {
    {'#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'       },
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'       },
    {'#', '.', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'      },
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'       },
    {'#', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'       },
    {'#', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'       },
    {'#', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'       },
    {'#', '.', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'       },
    {'#', '.', '.', '.', '.', '.', '.', '.', '.', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#'       },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
    {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#', '#', '#', '#', '#', '#', '#', '#', '#', '#','#'     },
};




}


void Cor(){
printf("\033[0;32m");
}


void Tutorial()
{
//void que vai apresentar o tutoria do jogo
 int Prosseguir = 1;

 system("cls||clear");
 printf("1/3 \n");
 sleep(1);
 printf("TUDO BEM VOCE ESCOLHEU O TUTORIAL\n");
 sleep(1);
 printf("O jogo eh do estilo aventura/puzzle onde o objetivo eh o jogador conseguir passar de tres fases. Em cada fase o jogador\ndeve se movimentar para pegar uma chave para abrir a porta fechada\n");
 sleep(3);
 printf("-> FASE 1: Essa fase possui uma dimensao de 15x15 e possui os seguintes elementos: jogador, parede, chave e porta \n");
 sleep(3);
 printf("-> FASE 2: Essa fase possui uma dimensao de 30x30 e possui os seguintes elementos: todos da Fase 1, botao, espinhos e\nMonstro nivel 1 \n");
 sleep(3);
printf("-> FASE 3:  Essa fase possui uma dimensao de 60x60 e possui os seguintes elementos: todos da Fase 2, teletransporte e\nmonstro nivel 2. \n");
sleep(3);

printf("Aperte [1] para avancar: "); scanf("%d", &Prosseguir);

if (Prosseguir == 1){
    system("cls||clear");
    printf("2/3\n");
    sleep(2);
    printf("o jogo possui diversos comandos de locomocao sendo eles: \n");
    sleep(2);
    printf("W: O jogador movimenta uma unidade para cima\nA: O jogador movimenta uma unidade para esquerda\nS: O jogador movimenta uma unidade para baixo\nD: O jogador movimenta uma unidade para direita\nI: O jogador interage com o objeto que esta em cima.\n");
    printf("Aperte [1] para avancar: "); scanf("%d", &Prosseguir);

    system("cls||clear");
    printf("3/3\n");
    sleep(2);
    printf("essas fases sao compostas por alguns elementos: \n");
    sleep(1);
    printf("&: Simbolo que representa o jogador.\n");
    printf("*: Simbolo que representa uma parede, o jogador ao se movimentar não pode passar pela parede.\n");
    printf("@: Simbolo que representa a chave para abrir a porta para finalizar a fase, a porta abre no momento que o jogador interage com a chave.\n");
    printf("D: Simbolo que representa a porta fechada\n");
    printf("=: Simbolo que representa a porta aberta quando o jogador interage com a chave.\n");
    printf("O: Simbolo que representa um botao que o usuario pode interagir, o botao fica no chao e o jogador deve ficar em cima dele para poder interagir.\n");
    printf("#: Simbolo que representa um espinho. A fase eh reiniciada quando o jogador toca no espinho, caso a fase seja reiniciada tres vezes, o jogo volta para o menu principal.\n");
    printf(">: Simbolo que representa um teletransporte. O teletransporte sempre deve vir em pares, quando o jogador toca em um ele eh transportado para o outro e vice-versa.\n");
    printf("¬: Simbolo que representa o monstro nivel 1. O monstro tem um movimento aleatorio, logo, ele movimenta um bloco para \ncima ou para direita ou para esquerda ou para baixo.O monstro sempre faz uma movimentacao depois do usuario se\nmovimentar ou interagir com um objeto.\n");
    printf("K: Simbolo que representa o monstro nivel 2. O monstro nivel dois tem uma inteligencia de se movimentar na direcao do jogador.O monstro nao precisa saber desviar de obstaculos, ele sempre vai andar em linha reta em direcao do jogador.\n");
    sleep(1);

    printf("Aperte [2] para voltar para o menu princpal: "); scanf("%d", &Prosseguir);
    if(Prosseguir == 2){
        system("cls||clear");
        main();    }
}






}










int main(){
int Escolha;

Cor();
printf("                                        ---------------------------------------\n");

            printf("                                       *      M     M EEEE N N    N U   U      *\n");
            printf("                                       *      M M M M E    N  N   N U   U      *\n");
            printf("                                       *      M  M  M EEE  N   N  N U   U      *\n");
            printf("                                       *      M     M E    N    N N U   U      *\n");
            printf("                                       *      M     M EEEE N     N   UUU       *\n");
printf("                                        ---------------------------------------\n\n\n\n\n\n\n");


printf("                                                    [1] JOGAR \n");
printf("                                                    [2] TUTORIAL\n");
printf("                                                    [3] SAIR \n");
scanf("%d", &Escolha);

switch(Escolha){

    case 1:
        PrimeiraFase();
        break;

    case 2:
            Tutorial();
            break;

        case 3:
        printf("SAINDO....");
        break;
      }

return 0;
}
